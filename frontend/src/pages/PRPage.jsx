import React, { useEffect, useState } from "react";
import axios from "axios";
import "./PRPage.css";

export default function PRPage() {
  const [items, setItems] = useState([]);
  const [rows, setRows] = useState([
    { item_id: "", quantity: 1, unit_price: 0, total: 0 },
  ]); // üîπ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏°‡∏µ 1 ‡πÅ‡∏ñ‡∏ß

  const [requiredDate, setRequiredDate] = useState("");

  useEffect(() => {
    const fetchItems = async () => {
      const token = localStorage.getItem("token");
      try {
        const res = await axios.get("http://localhost:5000/api/items", {
          headers: { Authorization: `Bearer ${token}` },
        });
        setItems(res.data);
      } catch (err) {
        console.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ", err);
      }
    };
    fetchItems();
  }, []);

  useEffect(() => {
    const spacing = document.querySelector(".dynamic-spacing");
    if (spacing) {
      spacing.style.minHeight = `${30 + rows.length * 5}px`; // üîπ ‡∏Ç‡∏¢‡∏±‡∏ö Total Amount ‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß
    }
  }, [rows]);

  const addRow = () => {
    setRows([...rows, { item_id: "", quantity: 1, unit_price: 0, total: 0 }]);
  };

  const handleChange = (index, field, value) => {
    const updatedRows = [...rows];
    if (field === "item_id") {
      const selectedItem = items.find((item) => item.id === parseInt(value));
      if (selectedItem) {
        updatedRows[index] = {
          item_id: selectedItem.id,
          quantity: 1,
          unit_price: parseFloat(selectedItem.unit_price),
          total: parseFloat(selectedItem.unit_price),
        };
      }
    } else if (field === "quantity") {
      const quantity = parseInt(value);
      if (quantity < 1) {
        alert("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1 ‡πÑ‡∏î‡πâ");
        return;
      }
      updatedRows[index].quantity = quantity;
      updatedRows[index].total = updatedRows[index].unit_price * quantity;
    }
    setRows(updatedRows);
  };

  const handleDeleteRow = (index) => {
    if (rows.length > 1) {
      const updatedRows = rows.filter((_, i) => i !== index);
      setRows(updatedRows);
    }
  };

  const handleSubmit = async () => {
    const token = localStorage.getItem("token");

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    for (const row of rows) {
      if (row.quantity < 1) {
        alert("‚ùå ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 1");
        return;
      }
    }

    try {
      await axios.post(
        "http://localhost:5000/api/pr",
        {
          description: "‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡∏û‡∏±‡∏™‡∏î‡∏∏‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
          required_date: requiredDate, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ô‡∏µ‡πâ
          items: rows.map((r) => ({
            item_id: r.item_id,
            quantity: r.quantity,
          })),
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );
      alert("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PR ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
      setRequiredDate(""); // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ñ‡πà‡∏≤ required date
      setRows([{ item_id: "", quantity: 1, unit_price: 0, total: 0 }]);
    } catch (err) {
      console.error("‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á PR ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß", err);
      alert("‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á PR ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß");
    }
  };

  const totalAmount = rows.reduce((sum, row) => sum + row.total, 0);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î min ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
  const getMinDate = () => {
    const today = new Date();
    // Adjust the date to Thailand timezone (UTC +7)
    const thailandDate = new Date(
      today.toLocaleString("en-US", { timeZone: "Asia/Bangkok" })
    );
    thailandDate.setHours(0, 0, 0, 0); // set to start of the day to avoid timezone issues
    const minDate = thailandDate.toISOString().split("T")[0]; // ‡πÉ‡∏ä‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏™‡πà‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡πÄ‡∏ß‡∏•‡∏≤
    return minDate;
  };

  return (
    <>
      <h1 className="pr-title">‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Ç‡∏≠‡∏ã‡∏∑‡πâ‡∏≠ (Purchase Request - PR)</h1>
      <div className="pr-container">
        <table className="pr-table">
          <thead>
            <tr>
              <th>‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</th>
              <th>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô</th>
              <th>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢</th>
              <th>‡∏£‡∏ß‡∏°</th>
              <th>‡∏•‡∏ö</th>
            </tr>
          </thead>
          <tbody>
            {rows.map((row, index) => (
              <tr key={index}>
                <td>
                  <select
                    value={row.item_id}
                    onChange={(e) =>
                      handleChange(index, "item_id", e.target.value)
                    }
                  >
                    <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</option>
                    {items.map((item) => (
                      <option key={item.id} value={item.id}>
                        {item.name} ({item.unit})
                      </option>
                    ))}
                  </select>
                </td>
                <td>
                  <input
                    type="number"
                    min="1"
                    value={row.quantity}
                    onChange={(e) =>
                      handleChange(index, "quantity", e.target.value)
                    }
                  />
                </td>
                <td>{row.unit_price.toFixed(2)}</td>
                <td>{row.total.toFixed(2)}</td>
                <td>
                  <button
                    onClick={() => handleDeleteRow(index)}
                    className="delete-button"
                    disabled={rows.length === 1} // üîπ ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏•‡∏ö ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏ñ‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
                  >
                    ‚ùå
                  </button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
        <div className="required-date-wrapper">
          <label htmlFor="requiredDate">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£:</label>
          <input
            type="date"
            id="requiredDate"
            value={requiredDate}
            onChange={(e) => setRequiredDate(e.target.value)}
            className="required-date-input"
            min={getMinDate()} // ‡πÄ‡∏û‡∏¥‡πà‡∏° min date ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
          />
        </div>

        <div className="dynamic-spacing">
          <p className="total-amount">Total: ‡∏ø{totalAmount.toFixed(2)}</p>
        </div>
      </div>

      <div className="button-container">
        <button onClick={addRow} className="pr-button add-item">
          + ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        </button>
        <button onClick={handleSubmit} className="pr-button submit-pr">
          ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö PR
        </button>
      </div>
    </>
  );
}
